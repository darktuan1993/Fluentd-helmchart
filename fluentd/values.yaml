nameOverride: ""
fullnameOverride: ""

# DaemonSet, Deployment or StatefulSet
kind: "DaemonSet"
# azureblob, cloudwatch, elasticsearch7, elasticsearch8, gcs, graylog , kafka, kafka2, kinesis, opensearch
variant: elasticsearch7
# # Only applicable for Deployment or StatefulSet
# replicaCount: 1

image:
  repository: "fluent/fluentd-kubernetes-daemonset"
  pullPolicy: "IfNotPresent"
  tag: ""

## Optional array of imagePullSecrets containing private registry credentials
## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []

serviceAccount:
  create: true
  annotations: {}
  name: null

rbac:
  create: true

# from Kubernetes 1.25, PSP is deprecated
# See: https://kubernetes.io/blog/2022/08/23/kubernetes-v1-25-release/#pod-security-changes
# We automatically disable PSP if Kubernetes version is 1.25 or higher
podSecurityPolicy:
  enabled: true
  annotations: {}

## Security Context policies for controller pods
## See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for
## notes on enabling and using sysctls
##
podSecurityContext: {}
  # seLinuxOptions:
  #   type: "spc_t"

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# Configure the livecycle
# Ref: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/
lifecycle: {}
  # preStop:
  #   exec:
  #     command: ["/bin/sh", "-c", "sleep 20"]

# Configure the livenessProbe
# Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /metrics
    port: metrics
  # initialDelaySeconds: 0
  # periodSeconds: 10
  # timeoutSeconds: 1
  # successThreshold: 1
  # failureThreshold: 3

# Configure the readinessProbe
# Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
readinessProbe:
  httpGet:
    path: /metrics
    port: metrics
  # initialDelaySeconds: 0
  # periodSeconds: 10
  # timeoutSeconds: 1
  # successThreshold: 1
  # failureThreshold: 3

resources: {}
  # requests:
  #   cpu: 10m
  #   memory: 128Mi
  # limits:
  #   memory: 128Mi

## only available if kind is Deployment
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80
  ## see https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/#autoscaling-on-multiple-metrics-and-custom-metrics
  customRules: []
    # - type: Pods
    #   pods:
    #     metric:
    #       name: packets-per-second
    #     target:
    #       type: AverageValue
    #       averageValue: 1k
  ## see https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#support-for-configurable-scaling-behavior
  # behavior:
  #   scaleDown:
  #     policies:
  #       - type: Pods
  #         value: 4
  #         periodSeconds: 60
  #       - type: Percent
  #         value: 10
  #         periodSeconds: 60

# priorityClassName: "system-node-critical"

nodeSelector: {}

## Node tolerations for server scheduling to nodes with taints
## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
##
tolerations: []
# - key: null
#   operator: Exists
#   effect: "NoSchedule"

## Affinity and anti-affinity
## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
##
affinity: {}

## Annotations to be added to fluentd DaemonSet/Deployment
##
annotations: {}

## Labels to be added to fluentd DaemonSet/Deployment
##
labels: {}

## Annotations to be added to fluentd pods
##
podAnnotations: {}

## Labels to be added to fluentd pods
##
podLabels: {}

## How long (in seconds) a pods needs to be stable before progressing the deployment
##
minReadySeconds:

## How long (in seconds) a pod may take to exit (useful with lifecycle hooks to ensure lb deregistration is done)
##
terminationGracePeriodSeconds:

## Deployment strategy / DaemonSet updateStrategy
##
updateStrategy: {}
#   type: RollingUpdate
#   rollingUpdate:
#     maxUnavailable: 1

## Additional environment variables to set for fluentd pods
env: []
  # - name: "FLUENTD_CONF"
  #   value: "../../../etc/fluent/fluent.conf"
  # - name: FLUENT_ELASTICSEARCH_HOST
  #   value: "elasticsearch-master"
  # - name: FLUENT_ELASTICSEARCH_PORT
  #   value: "9200"

envFrom: []

initContainers: []

## Name of the configMap containing a custom fluentd.conf configuration file to use instead of the default.
# mainConfigMapNameOverride: ""

## Name of the configMap containing files to be placed under /etc/fluent/config.d/
## NOTE: This will replace ALL default files in the aforementioned path!
# extraFilesConfigMapNameOverride: ""

mountVarLogDirectory: true
mountDockerContainersDirectory: true

volumes: []

volumeMounts: []

## Only available if kind is StatefulSet
## Fluentd persistence
##
persistence:
  enabled: false
  storageClass: ""
  accessMode: ReadWriteOnce
  size: 10Gi

## Fluentd service
##
service:
  enabled: true
  type: "ClusterIP"
  annotations: {}
  # loadBalancerIP:
  # externalTrafficPolicy: Local
  ports: []
  # - name: "forwarder"
  #   protocol: TCP
  #   containerPort: 24224

## Prometheus Monitoring
##
metrics:
  serviceMonitor:
    enabled: false
    additionalLabels:
      release: prometheus-operator
    namespace: ""
    namespaceSelector: {}
    ## metric relabel configs to apply to samples before ingestion.
    ##
    metricRelabelings: []
    # - sourceLabels: [__name__]
    #   separator: ;
    #   regex: ^fluentd_output_status_buffer_(oldest|newest)_.+
    #   replacement: $1
    #   action: drop
    ## relabel configs to apply to samples after ingestion.
    ##
    relabelings: []
    # - sourceLabels: [__meta_kubernetes_pod_node_name]
    #   separator: ;
    #   regex: ^(.*)$
    #   targetLabel: nodename
    #   replacement: $1
    #   action: replace
    ## Additional serviceMonitor config
    ##
    # jobLabel: fluentd
    # scrapeInterval: 30s
    # scrapeTimeout: 5s
    # honorLabels: true

  prometheusRule:
    enabled: false
    additionalLabels: {}
    namespace: ""
    rules: []
    # - alert: FluentdDown
    #   expr: up{job="fluentd"} == 0
    #   for: 5m
    #   labels:
    #     context: fluentd
    #     severity: warning
    #   annotations:
    #     summary: "Fluentd Down"
    #     description: "{{ $labels.pod }} on {{ $labels.nodename }} is down"
    # - alert: FluentdScrapeMissing
    #   expr: absent(up{job="fluentd"} == 1)
    #   for: 15m
    #   labels:
    #     context: fluentd
    #     severity: warning
    #   annotations:
    #     summary: "Fluentd Scrape Missing"
    #     description: "Fluentd instance has disappeared from Prometheus target discovery"

## Grafana Monitoring Dashboard
##
dashboards:
  enabled: "true"
  namespace: ""
  labels:
    grafana_dashboard: '"1"'

## Fluentd list of plugins to install
##
plugins: []
# - fluent-plugin-out-http

## Add fluentd config files from K8s configMaps
##
configMapConfigs: []
#  - fluentd-prometheus-conf
#  - fluentd-systemd-conf

## Fluentd configurations:
##
fileConfigs:
  01_sources.conf: |-
    ## logs from podman
    <source>
      @type tail
      @id in_tail_container_logs
      @label @KUBERNETES
      path /var/log/containers/*.log
      pos_file /var/log/fluentd-containers.log.pos
      tag kubernetes.*
      read_from_head true
      <parse>
        @type multi_format
        <pattern>
          format json
          time_key time
          time_type string
          time_format "%Y-%m-%dT%H:%M:%S.%NZ"
          keep_time_key false
        </pattern>
        <pattern>
          format regexp
          expression /^(?<time>.+) (?<stream>stdout|stderr)( (.))? (?<log>.*)$/
          time_format '%Y-%m-%dT%H:%M:%S.%NZ'
          keep_time_key false
        </pattern>
      </parse>
      emit_unmatched_lines true
    </source>

    # expose metrics in prometheus format
    <source>
      @type prometheus
      bind 0.0.0.0
      port 24231
      metrics_path /metrics
    </source>

  02_filters.conf: |-
    <label @KUBERNETES>
          <match kubernetes.var.log.containers.fluentd**>
            @type relabel
            @label @FLUENT_LOG
          </match>

          # Bỏ comment nếu muốn ignore logs từ kube-system
          # <match kubernetes.var.log.containers.**_kube-system_**>
          #   @type null
          #   @id ignore_kube_system_logs
          # </match>

          # Thêm kubernetes metadata
          <filter kubernetes.**>
            @type kubernetes_metadata
            @id filter_kube_metadata
            skip_labels false
            skip_container_metadata false
            skip_namespace_metadata false
            skip_master_url true
            annotation_match [".*"]
            de_dot false
            de_dot_separator '_'
          </filter>

          # Parse JSON logs từ containers (nếu có)
          <filter kubernetes.**>
            @type parser
            @id parser_container_logs
            key_name log
            reserve_data true
            remove_key_name_field false
            emit_invalid_record_to_error false
            suppress_parse_error_log true
            <parse>
              @type json
              time_key ts
              time_type float
              time_format %s
              keep_time_key true
            </parse>
          </filter>

          # Parse httplog format để extract method, URL, status code, response time
          <filter kubernetes.**>
            @type parser
            @id parser_httplog
            key_name log
            reserve_data true
            remove_key_name_field false
            emit_invalid_record_to_error false
            suppress_parse_error_log true
            <parse>
              @type regexp
              expression /^\[httplog\]\s+(?<method>\w+)\s+(?<url>\S+)\s+completed\s+with\s+status\s+code\s+(?<status_code>\d+)\s+in\s+(?<response_time>[\d.]+)\s+seconds/
              types status_code:integer,response_time:float
            </parse>
          </filter>

          # Parse các format log khác (có thể mở rộng thêm)
          <filter kubernetes.**>
            @type parser
            @id parser_general_log_level
            key_name log
            reserve_data true
            remove_key_name_field false
            emit_invalid_record_to_error false
            suppress_parse_error_log true
            <parse>
              @type regexp
              expression /^\[(?<log_level>\w+)\]/
            </parse>
          </filter>

          # Xử lý timestamp và format lại theo mẫu mong muốn
          <filter kubernetes.**>
            @type record_transformer
            @id transformer_main_format
            enable_ruby true
            <record>
              # Giữ nguyên log message gốc
              message ${record["log"] || record["msg"] || ""}
              
              # Xử lý timestamp - ưu tiên ts từ JSON parse, sau đó dùng time hiện tại
              timestamp ${record.dig("ts") ? Time.at(record["ts"]).utc.strftime('%Y-%m-%dT%H:%M:%S.%3NZ') : time.strftime('%Y-%m-%dT%H:%M:%S.%3NZ')}
              "@timestamp" ${record.dig("ts") ? Time.at(record["ts"]).utc.strftime('%Y-%m-%dT%H:%M:%S.%3NZ') : time.strftime('%Y-%m-%dT%H:%M:%S.%3NZ')}
              
              # Thêm các trường kubernetes metadata theo format mong muốn
              kubernetes_namespace ${record.dig("kubernetes", "namespace_name") || "unknown"}
              kubernetes_pod ${record.dig("kubernetes", "pod_name") || "unknown"}
              kubernetes_container ${record.dig("kubernetes", "container_name") || "unknown"}
              
              # Thêm stream information (stdout/stderr)
              stream ${record.dig("stream") || "stdout"}
              
              # Thêm log_source identifier
              log_source "kubernetes"
              
              # Thêm các trường parsed từ httplog (nếu có)
              http_method ${record["method"]}
              http_url ${record["url"]}
              http_status_code ${record["status_code"]}
              http_response_time ${record["response_time"]}
              
              # Extract domain từ URL nếu có
              http_domain ${record["url"] ? record["url"].match(/https?:\/\/([^\/]+)/)?[1] : nil}
              
              # Extract path từ URL nếu có  
              http_path ${record["url"] ? record["url"].match(/https?:\/\/[^\/]+(\/[^?]*)/)?[1] : nil}
              
              # Phân loại request type
              request_type ${record["method"] ? (record["method"] == "GET" ? "read" : "write") : nil}
              
              # Parse log level nếu có
              parsed_log_level ${record["log_level"]}
            </record>
            remove_keys ts,method,url,status_code,response_time,log_level
          </filter>

          # Filter đặc biệt cho gorse-worker với các metrics
          <filter kubernetes.var.log.containers.gorse-worker**>
            @type record_transformer
            @id transformer_gorse_worker
            enable_ruby true
            <record>
              # Parse các metrics từ gorse worker nếu có
              n_complete_users ${record["n_complete_users"]}
              n_working_users ${record["n_working_users"]}
              throughput ${record["throughput"]}
              log_level ${record["level"]}
              service_type "gorse-worker"
            </record>
          </filter>

          # Cleanup và validate dữ liệu
          <filter kubernetes.**>
            @type record_transformer
            @id transformer_cleanup_validate
            enable_ruby true
            <record>
              # Đảm bảo các trường bắt buộc không null
              _valid ${!record["kubernetes_namespace"].nil? && !record["kubernetes_pod"].nil? && !record["kubernetes_container"].nil?}
              
              # Đảm bảo message không empty
              _has_message ${!record["message"].nil? && !record["message"].empty?}
            </record>
          </filter>

          # Loại bỏ các record không hợp lệ
          <filter kubernetes.**>
            @type grep
            @id filter_valid_records
            <and>
              <regexp>
                key _valid
                pattern ^true$
              </regexp>
              <regexp>
                key _has_message
                pattern ^true$
              </regexp>
            </and>
          </filter>

          # Final cleanup - xóa các trường temporary và không cần thiết
          <filter kubernetes.**>
            @type record_modifier
            @id final_cleanup
            remove_keys _valid,_has_message,kubernetes,docker,log_original
            # Xóa các trường null hoặc empty
            <record>
              _dummy_ ${record.delete_if{|k,v| v.nil? || (v.respond_to?(:empty?) && v.empty?)}}
            </record>
            remove_keys _dummy_
          </filter>

          # Route tới dispatcher
          <match **>
            @type relabel
            @label @DISPATCH
          </match>
        </label>

  03_dispatch.conf: |-
    <label @DISPATCH>
      <filter **>
        @type prometheus
        <metric>
          name fluentd_input_status_num_records_total
          type counter
          desc The total number of incoming records
          <labels>
            tag ${tag}
            hostname ${hostname}
          </labels>
        </metric>
      </filter>

      <match **>
        @type relabel
        @label @OUTPUT
      </match>
    </label>

  04_outputs.conf: |-
    <label @OUTPUT>
      <match **>
        @type elasticsearch
        host "172.16.0.225"
        port 19200
        path ""
        user elastic
        password KyZjD8qkotm70Ci
        # Don't wait for elastic to start up.
        verify_es_version_at_startup false
      </match>
    </label>

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    # - host: fluentd.example.tld
    - port: 9880

  tls: []
  # - secretName: fluentd-tls
  #   hosts:
  #     - fluentd.example.tld
